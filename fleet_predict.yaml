openapi: 3.0.1
info:
  title: Fleet Predict Backend API
  description: >
    The Fleet Predict Backend API is a RESTful API that provides access to the Fleet Predict service. 
    It allows users to manage and retrieve information about fleet predictions, including creating, updating, 
    and deleting predictions, as well as retrieving prediction results.
    
  license:
    name: Apache License Version 2.0, January 2004
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 1.0.0
servers:
  - url: http://localhost:4000
    description: Local development server

security:
  - bearerAuth: []

paths:
  /:
    get:
      summary: Health check endpoint
      security: []
      description: >-
        This endpoint allows a user of the FleetPredict Backend Service to check if the
        service is listening.
      tags:
        - Health
      responses:
        "200":
          description: Returns an ApiResponse with data set to null if the service is running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                customStatus: 1200
                message: "OK"
                data: null
  
  /auth/register:
    post:
      summary: Register a new passenger
      security: []
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        "400":
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Login with username and password
      security: []
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /system-user:
    get:
      summary: Retrieve all users
      tags: [User]
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "User list retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /system-user/role/{role}:
    get:
      summary: Retrieve all users with the same role
      tags: [User]
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "User list retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /system-user/{id}:
    get:
      summary: Retrieve a user by ID
      tags: [User]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /passenger:
    description: >
      This endpoint allows you to manage user profiles. These are Users with a role of 
      PASSENGER only!
    get:
      summary: Retrieve all profiles
      tags: [Passenger]
      responses:
        "200":
          description: List of profiles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Profile list retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /passenger/register:
    post:
      summary: Register a passenger
      tags: [Passenger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        "200":
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /passenger/{id}:
    get:
      summary: Retrieve a profile by ID
      tags: [Passenger]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /passenger/user/{id}:
    get:
      summary: Retrieve a profile by User ID
      tags: [Passenger]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /passenger/find/{id}:
    get:
      summary: Retrieve a profile by User ID
      tags: [Passenger]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /wallets:
    get:
      summary: Retrieve all wallets
      tags: [Wallet]
      responses:
        "200":
          description: List of wallets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Wallet list retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Wallet'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /wallets/{id}:
    get:
      summary: Retrieve a wallet by ID
      tags: [Wallet]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallets/username/{username}:
    get:
      summary: Retrieve a wallet by ID
      tags: [Wallet]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  
  /bus:
    get:
      summary: Get list of all buses
      tags: [Bus]
      responses:
        "200":
          description: Returns list of buses
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: Bus List
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bus'
        "400":
          description: Invalid bus data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    post:
      summary: Create a new bus
      tags: [Bus]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusCreateRequest'
      responses:
        "201":
          description: Bus created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        "400":
          description: Invalid Bus data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bus/{id}:
    get:
      summary: Get bus by ID
      tags: [Bus]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Returns a single bus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        "400":
          description: Invalid Bus data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    put:
      summary: Update a bus by ID
      tags: [Bus]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusCreateRequest'
      responses:
        "200":
          description: Bus updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        "400":
          description: Invalid bus data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /bus/user/{id}:
    get:
      summary: Get list of all buses by user id
      tags: [Bus]
      responses:
        "200":
          description: Returns list of buses
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: Bus List
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bus'
        "400":
          description: Invalid bus data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    delete:
      summary: Delete a bus by ID
      tags: [Bus]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Bus deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "400":
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  
  /location:
    get:
      summary: Get all locations
      tags: [Location]
      responses:
        "200":
          description: List of locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Location list"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new location
      tags: [Location]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationCreateRequest'
      responses:
        "200":
          description: Location created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        "400":
          description: Invalid location data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /location/{id}:
    get:
      summary: Get a location by ID
      tags: [Location]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Location retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a location
      tags: [Location]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a location
      tags: [Location]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Location deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /route:
    get:
      summary: Get all routes
      tags: [Route]
      responses:
        "200":
          description: List of routes
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Route list"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Route'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new route
      tags: [Route]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteCreateRequest'
      responses:
        "200":
          description: Route created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /route/{id}:
    get:
      summary: Get a route by ID
      tags: [Route]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Route retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a route
      tags: [Route]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Route deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /trip:
    get:
      summary: Get all trips
      tags: [Trip]
      responses:
        "200":
          description: List of trips retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Trip list retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TripResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new trip
      tags: [Trip]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripRequest'
      responses:
        "201":
          description: Trip created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponse'
        "400":
          description: Invalid trip data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trip/{id}:
    get:
      summary: Get a trip by ID
      tags: [Trip]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Trip retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponse'
        "400":
          description: Invalid trip ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trip/{id}/start:
    put:
      summary: Start a trip by ID
      tags: [Trip]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Trip started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripStatusResponse'
        "400":
          description: Invalid trip ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trip/{id}/cancel:
    put:
      summary: Start a trip by ID
      tags: [Trip]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Trip completely, Note that the tripStatus must be 'CANCELLED'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripStatusResponse'
        "400":
          description: Invalid trip ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trip/{id}/complete:
    put:
      summary: Start a trip by ID
      tags: [Trip]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Trip completely, Note that the tripStatus must be 'COMPLETED'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripStatusResponse'
        "400":
          description: Invalid trip ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /trip/user/{id}:
    get:
      summary: Get all trips by user ID
      tags: [Trip]
      responses:
        "200":
          description: List of trips retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Trip list retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TripResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trip/passenger/{id}:
    get:
      summary: Get all trips by passeger ID
      tags: [Trip]
      responses:
        "200":
          description: List of trips retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Trip list retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TripResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transaction-ledger:
    get:
      summary: Retrieve all payment transactions
      tags: [TransactionLedger]
      responses:
        "200":
          description: List of payment transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customStatus:
                    type: integer
                    example: 1200
                  message:
                    type: string
                    example: "Payment transactions retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionLedger'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /transaction-ledger/{id}:
    get:
      summary: Retrieve a payment transaction by ID
      tags: [TransactionLedger]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Payment transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLedgerResponse'
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# Ticket Management

  /ticket-management/reserve:
    post:
      summary: Create a new ticket reservation
      tags: [TicketManagement]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketManagementCreateRequest'
      responses:
        "200":
          description: Ticket reservation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketManagementResponse'
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/scan/{wallet_id}:             
    get:
      summary: Get all ticket for the wallet
      tags: [TicketManagement]
      responses:
        "200":
          description: List of ticket reservations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketManagement'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/board/{id}:
    put:
      summary: Board a passenger by ticket reservation ID, Note that the ticketStatus is BOARDED
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Ticket successfully boarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketManagementResponse'
        "400":
          description: Invalid ticket reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/cancel/{id}:
    put:
      summary: Cancel a  ticket reservation ID, Note that the ticketStatus is CANCELLED
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Ticket successfully boarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketManagementResponse'
        "400":
          description: Invalid ticket reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/{id}:
    get:
      summary: Get a ticket reservation by ID
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Ticket reservation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketManagementResponse'
        "400":
          description: Invalid reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/status/{status}:
    get:
      summary: Get a tickets by status
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of ticket reservations by status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketManagement'
        "400":
          description: Invalid reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/passenger/{id}:
    get:
      summary: Get a tickets by passenger id
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of tickets for passengers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketManagement'
        "400":
          description: Invalid reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/trip/{id}:
    get:
      summary: Get all tickets by trip id
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of tickets for passengers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketManagement'
        "400":
          description: Invalid reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/route/{id}:
    get:
      summary: Get all tickets by route id
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of tickets for passengers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketManagement'
        "400":
          description: Invalid reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/bus/{id}:
    get:
      summary: Get all tickets by route id
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of tickets for passengers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketManagement'
        "400":
          description: Invalid reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ticket-management:
    get:
      summary: Get all tickets
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of tickets for passengers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketManagement'
        "400":
          description: Invalid reservation ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ticket-management/trip/{id}/cancel:
    put:
      summary: Cancel a ticket reservation by trip ID, Note that the actual responses Returns null
      tags: [TicketManagement]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer

      responses:
        "200":
          description: Tickets Cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  

  /general-wallet:
    get:
      summary: Get a company account by ID
      tags: [CompanyAccount]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Company account retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyAccountResponse'
        "400":
          description: Invalid account ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  schemas:
    # DTOs
    ApiResponse:
      type: object
      properties:
        customStatus:
          type: integer
          example: 1200
        message:
          type: string
          example: Success
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        customStatus:
          type: integer
          example: 1400
        message:
          type: string
          example: Error
        data:
          type: "string"
          nullable: true
          example: null

    DeleteResponse:
      type: object
      properties:
        customStatus:
          type: integer
          example: 1200
        message:
          type: string
          example: "Deleted successfully"
        data:
          nullable: true
          example: null

    # Entities 

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: "Chimweso"
        lastName:
          type: string
          example: "Faith"
        username:
          type: string
          example: "chimwesofaith"
        email:
          type: string
          example: "chimwesofaith@gmail.com"
        role:
          type: string
          enum:
            - ADMIN
            - DRIVER
            - CONDUCTOR
            - PASSENGER
          example: "ADMIN"
        userStatus:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - PENDING_PASSWORD_UPDATE
          example: "ACTIVE"
    
    UserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Chimweso
        lastName:
          type: string
          example: "Faith"
        username:
          type: string
          example: "chimwesofaith"
        email:
          type: string
          example: "chimwesofaith@gmail.com"
        role:
          type: string
          enum:
            - ADMIN
            - DRIVER
            - CONDUCTOR
          example: "DRIVER"
  
    
    Profile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: '#/components/schemas/User'
        phone_number:
          type: string
          example: "+260123456789"
        address:
          type: string
          example: "123 Main St, Lusaka, Zambia"
        dateOfBirth:
          type: string
          format: date
          example: "1990-01-01"
        wallet:
          $ref: '#/components/schemas/Wallet'
        

    ProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "Chimweso"
        lastName:
          type: string
          example: "Faith"
        email:
          type: string
          example: "chimwesofaith@gmail.com"
        username:
          type: string
          example: "chimwesofaith"
        password:
          type: string
          example: "password123"
        phoneNumber:
          type: string
          example: "+260123456789"
        address:
          type: string
          example: "123 Main St, Lusaka, Zambia"
        dateOfBirth:
          type: string
          format: date
          example: "1990-01-01"
        idType:
          type: string
          enum:
            - NRC
            - PASSPORT
            - DRIVER_LICENSE
          example: "NRC"
        idValue:
          type: string
          example: "667923/12/1"
      
    Wallet:
      type: object
      properties:
        id:
          type: integer
          example: 1
        availableBalance:
          type: number
          format: float
          example: 150.75
        currency:
          type: string
          example: "ZMW"
        accountNumber:
          type: string
          example: "1234567WAL-20250704-969189"

    Bus:
      type: object
      properties:
        id:
          type: string
          example: "12"
        numberPlate:
          type: string
          example: "ABC1234"
        busId:
          type: string
          example: "BUS123"
        capacity:
          type: integer
          example: 50
        assignedDriverId:
          type: integer
          example: 1
        assignedConductorId:
          type: integer
          example: 2
        

    BusCreateRequest:
      type: object
      properties:
        numberPlate:
          type: string
          example: "ABC1234"
        capacity:
          type: integer
          example: 50
        assignedDriverId:
          type: integer
          example: 1
        assignedConductorId:
          type: integer
          example: 1
    
    Location:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Lusaka"
        longitude:
          type: number
          format: float
          example: 28.3228
        latitude:
          type: number
          format: float
          example:  -15.4167
        busStationName:
          type: string
          example: "InterCity Bus Station"

    LocationCreateRequest:
      type: object
      required:
        - name
        - latitude
        - longitude
      properties:
        name:
          type: string
          example: "Lusaka"
        latitude:
          type: number
          format: float
          example: -15.4167
        longitude:
          type: number
          format: float
          example: 28.3228
        busStationName:
          type: string
          example: "InterCity Bus Station"
    
    Route:
      type: object
      properties:
        id:
          type: integer
          example: 1
        startLocation:
          $ref: '#/components/schemas/Location'
        endLocation:
          $ref: '#/components/schemas/Location'
        routeName:
          type: string
          example: "Lusaka - Kitwe"
        duration:
          type: number
          example: 34
        distance:
          type: number
          format: float
          example: 100.5
        fare:
          type: number
          format: float
          example: 12.50
      required:
        - id
        - start_location_id
        - end_location_id
        - distance
        - duration
        - fare
        - stops

    RouteCreateRequest:
      type: object
      properties:  
        startLocationId:
          type: integer
          example: 1
        endLocationId:
          type: integer
          example: 2

    Trip:
      type: object
      properties:
        id:
          type: integer
          example: 1
        busId:
          type: integer
          example: 12
        routeId:
          type: integer
          example: 1
        departureTime:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        actualDepartureTime:
          type: string
          format: date-time
          example: null
        arrivalTime:
          type: string
          format: date-time
          example: null
        tripStatus:
          type: string
          enum:
            - SCHEDULED
            - IN_PROGRESS
            - COMPLETED
            - CANCELLED
          example: "SCHEDULED"
        availableSeats:
          type: integer
          example: 40

    TripRequest:
      type: object
      properties:
        bus:
          type: integer
          example: 3
        route:
          type: integer
          example: 3
        departureTime:
          type: string
          example: "2025-07-07T08:30"
    
    TripStatus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        tripStatus:
          type: string
          example: "IN_PROGRESS"      

    TransactionLedger:
      type: object
      properties:
        id:
          type: integer
          example: 1
        walletId:
          type: integer
          example: 1
        transactionType:
          type: string
          enum:
            - TOP_UP
            - REFUND
            - FARE_PAYMENT
          example: "TOP_UP"
        timestamp:
          type: string
          format: date-time
          example: "2025-07-05T21:30:49.226345"
        amount:
          type: number
          format: float
          example: 100.0
        reference:
          type: string
          example: "TX123456789"
        narration:
          type: string
          example: "Top-up transaction"
    
    TicketManagement:
      type: object
      properties:
        id:
          type: integer
          example: 1
        passengerId:
          type: integer
          example: 1
        tripId:
          type: integer
          example: 12
        ticketStatus:
          type: string
          enum:
            - RESERVED
            - BOARDED
            - CANCELLED
          example: "RESERVED"
        reservationDate:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        boardedAt:
          type: string
          format: date-time
          example: null
        seatNumber:
          type: integer
          example: 4

    TicketManagementCreateRequest:
      type: object
      properties:
        tripId:
          type: integer
          example: 12
        passengerId:
          type: integer
          example: 1

    TicketReservatinEditRequest:
      type: object
      properties:
        status: 
          type: string
          enum:
              - BOARDED
              - CANCELLED
        

    CompanyAccount:
      type: object
      properties:
        id:
          type: integer
          example: 1
        currentBalance:
          type: number
          format:  float
          example: 10000.0
        lastKnownBankBalance:
          format:  float
          example: 9000.0
        lastUpdated: 
          type: string
          example: "2025-07-05 17:40"
    
    
    Register:
      type: object
      properties:
        first_name:
          type: string
          example: "Chimweso"
        last_name:
          type: string
          example: "Faith"
        email:
          type: string
          example: "chimwesofaith@gmail.com"
        password:
          type: string
          example: "password123"
        phone_number:
          type: string
          example: "+260123456789"
        address:
          type: string
          example: "123 Main St, Lusaka, Zambia"
        date_of_birth:
          type: string
          format: date
          example: "1990-01-01"
        id_type:
          type: string
          enum:
            - NRC
            - PASSPORT
            - DRIVER_LICENSE
          example: "NRC"
        id_value:
          type: string
          example: "667923/12/1"
        id_front_image:
          type: string
          example: "https://example.com/id_front.jpg"
        id_back_image:
          type: string
          example: "https://example.com/id_back.jpg"
        profile_picture:
          type: string
          example: "https://example.com/profile.jpg"

    Login:
      type: object
      properties:
        username:
          type: string
          example: "chimweso12"
        password:
          type: string
          example: "password123"
        


    # Entity Responses

    BusResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Bus'


    LocationResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Location'
    
    RouteResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Route'

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/User'
   
    ProfileResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Profile'
  
    WalletResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Wallet'

    TripResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Trip'
    
    TripStatusResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/TripStatus'

    TransactionLedgerResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/TransactionLedger'

    TicketManagementResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/TicketManagement'

    CompanyAccountResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CompanyAccount'

    RegisterResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Register'

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Login'

    # Security
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT

